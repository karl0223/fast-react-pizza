# Install all dependencies

npm i

# Install eslint

npm i eslint vite-plugin-eslint eslint-config-react-app --save-dev

# Create .eslintrc.json -- paste the extends

{
    "extends": "react-app"
}

# Vite.config.js

- import eslint and add it in the plugins

import eslint from "vite-plugin-eslint"

export default defineConfig({
  plugins: [react(), eslint],
});

---------------------------

# Install React Rotuer

npm i react-router-dom

# New way of implementing React Router

If you want to use powerful APIs like data loaders, data actions, data fetchers use this syntax (old way in WorldWise App)

const router = createBrowserRouter([
  {
    path: "/",
    element: <Home />,
  },
  {
    path: "/menu",
    element: <Menu />,
  },
  {
    path: "/cart",
    element: <Cart />,
  },
  {
    path: "/order/new",
    element: <CreateOrder />,
  },
  {
    path: "/order/:orderId",
    element: <Order />,
  },
]);

function App() {
  return <RouterProvider router={router} />;
}

---------------------------

# Fetching Data with React Router "Loaders"

# Render as you fetch strategy

use loaders

# Fetch on render approach

use 'useEffect'
data loading waterfalls

---------------------------

# Check the status of the Page  // idle, loading 

import { useNavigation } from "react-router-dom";

const navigation = useNavigation();
const isLoading = navigation.state === "loading";

---------------------------

# Handling Errors with Error Elements

import { useRouteError } from "react-router-dom";

{
    path: "/menu",
    element: <Menu />,
    loader: menuLoader,
    errorElement: <Error />,                --- Error Element
},


const error = useRouteError();
<p>{error.data || error.message}</p>

---------------------------

# Writing Data with React Router "Actions"

use react 'Form' to submit data

# Create Action Function

export async function action({ request }) {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);

  const order = {
    ...data,
    cart: JSON.parse(data.cart),
    priority: data.priority === "on",
  };

  const newOrder = await createOrder(order);

  return redirect(`/order/${newOrder.id}`);
}


# App
{
    path: "/order/new",
    element: <CreateOrder />,
    action: createOrderAction,   // action function
},

---------------------------
